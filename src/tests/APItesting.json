{
	"info": {
		"_postman_id": "1f4307c9-f7c6-458a-9a6b-c4e76c8c6624",
		"name": "AudioHub_APItesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26874333"
	},
	"item": [
		{
			"name": "UsersRegister",
			"item": [
				{
					"name": "PostInvalidUser1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is correct after GET\r",
									"pm.test(\"Post invalid user 1, password length smaller thatn 8, status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"// Test if returned data is correct\r",
									"pm.test(\"Post invalid user 1, password length smaller thatn 8, data returned is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail[0].msg).to.match(/Value error, password must be at least 8 characters/);\r",
									"    pm.expect(jsonData.detail[0].type).to.match(/value_error/);\r",
									"    pm.expect(jsonData.detail[0].loc[1]).to.match(/password/);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{         \r\n\"username\":\"usertest3\", \r\n\"email\":\"usertest3@example.com\",\r\n\"password\":\"invalid\",\r\n\"alias\": \"User1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PostInvalidUser2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is correct after GET\r",
									"pm.test(\"Post invalid user 2,password must contain at least 1 letter, status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"// Test if returned data is correct\r",
									"pm.test(\"Post invalid user 2, password must contain at least 1 letter, data returned is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail[0].msg).to.match(/Value error, password must contain at least one letter/);\r",
									"    pm.expect(jsonData.detail[0].type).to.match(/value_error/);\r",
									"    pm.expect(jsonData.detail[0].loc[1]).to.match(/password/);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{         \r\n\"username\":\"usertest3\", \r\n\"email\":\"usertest3@example.com\",\r\n\"password\":\"11111111\",\r\n\"alias\": \"User1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PostInvalidUser3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is correct after GET\r",
									"pm.test(\"Post invalid user 3,password must contain at least 1 digit, status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"// Test if returned data is correct\r",
									"pm.test(\"Post invalid user 3, password must contain at least 1 digit, data returned is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail[0].msg).to.match(/Value error, password must contain at least one digit/);\r",
									"    pm.expect(jsonData.detail[0].type).to.match(/value_error/);\r",
									"    pm.expect(jsonData.detail[0].loc[1]).to.match(/password/);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{         \r\n\"username\":\"usertest3\", \r\n\"email\":\"usertest3@example.com\",\r\n\"password\":\"aaaaaaaa\",\r\n\"alias\": \"User1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PostInvalidUser4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is correct after GET\r",
									"pm.test(\"Post invalid user 4,password must contain at least one uppercase letter'r, status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"// Test if returned data is correct\r",
									"pm.test(\"Post invalid user 4, password must contain at least one uppercase letter', data returned is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail[0].msg).to.match(/Value error, password must contain at least one uppercase letter/);\r",
									"pm.globals.get(\"variable_key\");\r",
									"    pm.expect(jsonData.detail[0].type).to.match(/value_error/);\r",
									"    pm.expect(jsonData.detail[0].loc[1]).to.match(/password/);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{         \r\n\"username\":\"usertest3\", \r\n\"email\":\"usertest3@example.com\",\r\n\"password\":\"invalid1234\",\r\n\"alias\": \"User1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "PostInvalidUser5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is correct after GET\r",
									"pm.test(\"Post invalid user 5,password must contain at least one lowercase letter, status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"// Test if returned data is correct\r",
									"pm.test(\"Post invalid user 5, password must contain at least one lowercase letter, data returned is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail[0].msg).to.match(/Value error, password must contain at least one lowercase letter/);\r",
									"    pm.expect(jsonData.detail[0].type).to.match(/value_error/);\r",
									"    pm.expect(jsonData.detail[0].loc[1]).to.match(/password/);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{         \r\n\"username\":\"usertest3\", \r\n\"email\":\"usertest3@example.com\",\r\n\"password\":\"INVALID123\",\r\n\"alias\": \"User1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UsersLogIn",
			"item": [
				{
					"name": "LoginInvalidUser1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is correct after GET\r",
									"pm.test(\"Log in invalid user 5,user doesn't exist, status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test if returned data is correct\r",
									"pm.test(\"Post invalid user 5, password must contain at least one lowercase letter, data returned is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail).to.match(/User not found/);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "testuser1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "TestPassword123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginInvalidUser2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test if status code is correct after GET\r",
									"pm.test(\"Log in invalid user 1,there are missing credentials, status code is 422\", function () {\r",
									"  pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"// Test if returned data is correct\r",
									"pm.test(\"Post invalid user 5, password must contain at least one lowercase letter, data returned is correct\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.detail[0].msg).to.match(/Field required/);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "testuser1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GetHelloWorld",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test if status code is correct after GET\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// Test is returned JSON is correct\r",
							"pm.test(\"Returns Hello World text\",\r",
							" function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let response = {\"Hello\": \"World\"}\r",
							"    pm.expect(jsonData.Hello).to.eql(\"World\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						""
					]
				}
			},
			"response": []
		}
	]
}